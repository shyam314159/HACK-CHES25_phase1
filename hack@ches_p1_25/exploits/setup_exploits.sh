#!/bin/bash
# OpenTitan Exploit Framework Setup Script
# Prepares complete exploitation environment with all dependencies

set -e

echo "=================================================================="
echo "OpenTitan Security Exploit Framework Setup"
echo "=================================================================="
echo "Setting up comprehensive exploitation environment..."
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[-]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[*]${NC} $1"
}

# Check if running as root (needed for hardware access)
check_privileges() {
    if [[ $EUID -eq 0 ]]; then
        print_warning "Running as root - required for hardware access exploits"
    else
        print_info "Not running as root - some exploits will require sudo"
    fi
}

# Install system dependencies
install_dependencies() {
    print_info "Installing system dependencies..."
    
    # Update package lists
    apt-get update > /dev/null 2>&1
    
    # Install compilation tools
    apt-get install -y \
        build-essential \
        gcc \
        libc6-dev \
        make \
        cmake \
        git \
        python3 \
        python3-pip \
        python3-dev > /dev/null 2>&1
    
    print_status "System dependencies installed"
}

# Install Python packages
install_python_packages() {
    print_info "Installing Python packages..."
    
    pip3 install --user \
        numpy \
        matplotlib \
        scipy \
        argparse \
        pathlib \
        json \
        hashlib > /dev/null 2>&1
    
    print_status "Python packages installed"
}

# Create necessary directories
setup_directories() {
    print_info "Setting up directory structure..."
    
    mkdir -p reports
    mkdir -p dumps
    mkdir -p logs
    
    print_status "Directory structure created"
}

# Make scripts executable
setup_permissions() {
    print_info "Setting up file permissions..."
    
    chmod +x vulnerability_scanner.py
    chmod +x exploit_framework.py
    chmod +x setup_exploits.sh
    
    print_status "File permissions configured"
}

# Compile all exploits
compile_exploits() {
    print_info "Compiling exploitation code..."
    
    # Use make to compile all exploits
    if make all > /dev/null 2>&1; then
        print_status "All exploits compiled successfully"
    else
        print_error "Compilation failed - check dependencies"
        return 1
    fi
}

# Test compilation and basic functionality
test_setup() {
    print_info "Testing exploit framework setup..."
    
    # Test vulnerability scanner
    if python3 vulnerability_scanner.py --help > /dev/null 2>&1; then
        print_status "Vulnerability scanner ready"
    else
        print_error "Vulnerability scanner test failed"
    fi
    
    # Test exploit framework
    if python3 exploit_framework.py --help > /dev/null 2>&1; then
        print_status "Exploit framework ready"
    else
        print_error "Exploit framework test failed"
    fi
    
    # Check if exploits are compiled
    exploits=(debug_access_bypass alert_handler_timing_attack aes_side_channel_attack memory_corruption_exploit)
    
    for exploit in "${exploits[@]}"; do
        if [[ -x "$exploit" ]]; then
            print_status "Exploit $exploit compiled and executable"
        else
            print_warning "Exploit $exploit not found or not executable"
        fi
    done
}

# Check hardware prerequisites
check_hardware() {
    print_info "Checking hardware prerequisites..."
    
    # Check for /dev/mem access (needed for memory-mapped I/O)
    if [[ -r /dev/mem ]]; then
        print_status "/dev/mem accessible"
    else
        print_warning "/dev/mem not accessible - some exploits may fail"
    fi
    
    # Check for USB devices (JTAG adapters)
    if lsusb | grep -q "0403:6010"; then
        print_status "Nexys Video FPGA board detected"
    elif lsusb | grep -q "0403:6014"; then
        print_status "Arty A7 FPGA board detected"
    elif lsusb | grep -iq xilinx; then
        print_status "Xilinx device detected"
    else
        print_warning "No FPGA board detected - connect target device"
    fi
    
    # Check for GPIO access (power measurement)
    if [[ -d /sys/class/gpio ]]; then
        print_status "GPIO interface available for power measurement"
    else
        print_warning "GPIO interface not available"
    fi
}

# Create example configuration files
create_configs() {
    print_info "Creating configuration files..."
    
    # Create exploit configuration
    cat > exploit_config.json << 'EOF'
{
    "target_device": "fpga",
    "connection_type": "jtag",
    "power_measurement": "gpio",
    "timeouts": {
        "debug_exploit": 30,
        "alert_exploit": 120,
        "crypto_exploit": 300,
        "memory_exploit": 60
    },
    "thresholds": {
        "correlation_threshold": 0.3,
        "timing_threshold": 0.1,
        "success_rate": 0.8
    }
}
EOF
    
    print_status "Configuration files created"
}

# Generate usage examples
create_examples() {
    print_info "Creating usage examples..."
    
    cat > run_examples.sh << 'EOF'
#!/bin/bash
# OpenTitan Exploit Usage Examples

echo "OpenTitan Exploitation Examples"
echo "==============================="
echo ""

echo "1. Run vulnerability scanner:"
echo "   python3 vulnerability_scanner.py ../"
echo ""

echo "2. Run complete exploitation framework:"
echo "   python3 exploit_framework.py --mode all"
echo ""

echo "3. Run individual exploits (requires root):"
echo "   sudo ./debug_access_bypass"
echo "   sudo ./alert_handler_timing_attack"
echo "   sudo ./aes_side_channel_attack"
echo "   sudo ./memory_corruption_exploit"
echo ""

echo "4. Compile specific exploit:"
echo "   make debug_access_bypass"
echo ""

echo "5. Clean and rebuild:"
echo "   make clean && make all"
echo ""

echo "6. Run with different target:"
echo "   python3 exploit_framework.py --target simulation"
echo ""
EOF
    
    chmod +x run_examples.sh
    
    print_status "Usage examples created"
}

# Display final setup information
show_summary() {
    echo ""
    echo "=================================================================="
    echo "Setup Complete - OpenTitan Exploit Framework Ready"
    echo "=================================================================="
    echo ""
    echo "Available exploits:"
    echo "  1. Debug Access Bypass (CVE-2024-DEBUG-001) - CVSS 8.2"
    echo "  2. Alert Timing Attack (CVE-2024-ALERT-002) - CVSS 7.1"
    echo "  3. AES Side-Channel (CVE-2024-CRYPTO-003) - CVSS 8.1"
    echo "  4. Memory Corruption (CVE-2024-MEMORY-004) - CVSS 6.8"
    echo ""
    echo "Quick start commands:"
    echo "  ./run_examples.sh                    # Show usage examples"
    echo "  python3 vulnerability_scanner.py ../ # Scan for vulnerabilities"
    echo "  python3 exploit_framework.py        # Run exploitation framework"
    echo "  make help                           # Show build options"
    echo ""
    echo "Generated files:"
    echo "  reports/                            # Exploitation reports"
    echo "  dumps/                              # Memory and data dumps"
    echo "  logs/                               # Execution logs"
    echo "  exploit_config.json                 # Framework configuration"
    echo ""
    echo "Prerequisites for hardware exploits:"
    echo "  - Root privileges (sudo access)"
    echo "  - FPGA board connected via USB"
    echo "  - JTAG debugger (for debug exploits)"
    echo "  - Power measurement setup (for side-channel)"
    echo ""
    echo "Documentation:"
    echo "  README.md                           # Comprehensive documentation"
    echo "  ../ATTACK_SURFACE_AND_EXPLOITATION_GUIDE.md # Attack methodology"
    echo ""
    print_status "OpenTitan exploit framework is ready for use!"
}

# Main setup function
main() {
    print_info "Starting OpenTitan exploit framework setup..."
    
    check_privileges
    
    # Only install dependencies if running as root
    if [[ $EUID -eq 0 ]]; then
        install_dependencies
        install_python_packages
    else
        print_warning "Skipping system package installation (not root)"
        print_info "Run: sudo apt-get install build-essential gcc python3-dev"
    fi
    
    setup_directories
    setup_permissions
    compile_exploits
    test_setup
    check_hardware
    create_configs
    create_examples
    
    show_summary
}

# Run main setup
main "$@"
# OpenTitan Exploit Compilation Makefile
# Compiles all C-based exploits with proper flags and dependencies

CC = gcc
CFLAGS = -std=c99 -Wall -Wextra -O2 -g
LDFLAGS = -lm

# Source files and their corresponding binaries
EXPLOITS = debug_access_bypass alert_handler_timing_attack aes_side_channel_attack memory_corruption_exploit

# Default target builds all exploits
all: $(EXPLOITS)

# Individual exploit compilation rules
debug_access_bypass: debug_access_bypass.c
	@echo "[+] Compiling Debug Access Bypass Exploit..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "[+] Debug exploit compiled successfully"

alert_handler_timing_attack: alert_handler_timing_attack.c
	@echo "[+] Compiling Alert Handler Timing Attack..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "[+] Alert timing exploit compiled successfully"

aes_side_channel_attack: aes_side_channel_attack.c
	@echo "[+] Compiling AES Side-Channel Attack..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "[+] AES side-channel exploit compiled successfully"

memory_corruption_exploit: memory_corruption_exploit.c
	@echo "[+] Compiling Memory Corruption Exploit..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "[+] Memory corruption exploit compiled successfully"

# Python scripts don't need compilation but we make them executable
python_tools:
	@echo "[+] Setting up Python tools..."
	chmod +x vulnerability_scanner.py
	chmod +x exploit_framework.py
	@echo "[+] Python tools ready"

# Install dependencies if needed
install_deps:
	@echo "[+] Installing compilation dependencies..."
	sudo apt-get update
	sudo apt-get install -y build-essential gcc libc6-dev
	@echo "[+] Dependencies installed"

# Run vulnerability scanner
scan:
	@echo "[+] Running vulnerability scanner..."
	python3 vulnerability_scanner.py ../

# Run individual exploits (requires root for hardware access)
test_debug:
	@echo "[+] Testing debug exploit..."
	sudo ./debug_access_bypass

test_alert:
	@echo "[+] Testing alert timing exploit..."
	sudo ./alert_handler_timing_attack

test_aes:
	@echo "[+] Testing AES side-channel exploit..."
	sudo ./aes_side_channel_attack

test_memory:
	@echo "[+] Testing memory corruption exploit..."
	sudo ./memory_corruption_exploit

# Run complete exploitation framework
exploit_all:
	@echo "[+] Running complete exploitation framework..."
	python3 exploit_framework.py --mode all

# Clean compiled binaries
clean:
	@echo "[+] Cleaning compiled exploits..."
	rm -f $(EXPLOITS)
	rm -f *.o
	rm -f core
	@echo "[+] Clean complete"

# Create reports directory
setup:
	@echo "[+] Setting up exploit environment..."
	mkdir -p reports
	mkdir -p dumps
	chmod +x *.py
	@echo "[+] Environment setup complete"

# Help target
help:
	@echo "OpenTitan Exploit Framework Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  all           - Compile all exploits"
	@echo "  scan          - Run vulnerability scanner"
	@echo "  exploit_all   - Run complete exploitation framework"
	@echo "  test_debug    - Test debug access bypass (requires root)"
	@echo "  test_alert    - Test alert timing attack (requires root)"
	@echo "  test_aes      - Test AES side-channel attack (requires root)"
	@echo "  test_memory   - Test memory corruption exploit (requires root)"
	@echo "  setup         - Set up exploit environment"
	@echo "  install_deps  - Install compilation dependencies"
	@echo "  clean         - Remove compiled binaries"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Individual exploits:"
	@echo "  debug_access_bypass"
	@echo "  alert_handler_timing_attack"
	@echo "  aes_side_channel_attack" 
	@echo "  memory_corruption_exploit"

.PHONY: all python_tools install_deps scan test_debug test_alert test_aes test_memory exploit_all clean setup help